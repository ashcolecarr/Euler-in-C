#include <stdio.h>
#include <time.h>
#include <math.h>

#define MAX_NUM	100

int isPrime(int number);

/* Project Euler Problem 29 */
int main()
{
    double timeTaken;
    clock_t start, end;
    start = clock();

    int totalTerms = MAX_NUM * MAX_NUM;

    /* Set up the list of bases. */
    int marks[MAX_NUM][3];
    int i, j, base = 2;
    for(i = 0; i < MAX_NUM; i++)
    {
	marks[i][0] = 1;
	marks[i][1] = base++;
	marks[i][2] = 0;
    }

    /* Mark the powers. */
    int power;
    for(i = 0; marks[i][1] * marks[i][1] <= MAX_NUM; i++)
    {
	int count = 1;
	power = marks[i][1];
	while(power <= MAX_NUM)
	{
	    power *= marks[i][1];
	    marks[power][0] = ++count;
	}
	marks[power][2] = marks[i][1];
    }

    /* Run through the numbers list and fill the values array based on the exponent position, e.g. 2^2 would result in 1 x 4 = 4, 4^2 is 2 x 2, etc. */
    int values[MAX_NUM + 1][MAX_NUM + 1];
    int exponent;
    for(i = 0; i < MAX_NUM; i++)
    {
	exponent = 2;
	for(j = 0; j < MAX_NUM; j++)
	{
	    values[i][j] = marks[i][0] * exponent++;
	}
    }

    /* Search through the grid for matches. */
    int k;
    for(i = 0; i < MAX_NUM; i++)
    {
	if(marks[i][0] > 1)
	{
	    for(j = 0; values[i][j] <= MAX_NUM; j++)
	    {
		for(k = 0; k < MAX_NUM; k++)
		{
		    if(values[i][j] == values[marks[i][2] - 2][k])
		    {
			totalTerms--;
			break;
		    }
		}
	    }
	}
    }

    printf("The number of distinct terms in the sequence generated by a^b for 2 ≤ a ≤ %d and 2 ≤ b ≤ %d is %d.", MAX_NUM, MAX_NUM, totalTerms);

    end = clock();
    timeTaken = (double)(end - start) / CLOCKS_PER_SEC;
    printf("\nProgram execution time took %f seconds.\n", timeTaken);
    return 0;
}
